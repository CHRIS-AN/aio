server.port=7942

#server.tomcat.additional-tld-skip-patterns=*.jar

# Oracle DB Setting
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:XE
spring.datasource.username=aio
spring.datasource.password=olive
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
# postgresSQL을 사용하면 발생하는 에러로그를 안뜨게 함
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# JPA 구현체로 사용할 하이버네이트가 생성한 sql을 콘솔에 출력할지 여부
spring.jpa.properties.hibernate.format_sql=true

# JPA Setting
# Spring은 EntityScan을 통해 @Entity 어노테이션을 사용한 클래스를 찾는다. spring.jpa.generate-ddl을 true로 설정하면 해당 데이터를 근거로 서버 시작 시점에 DDL문을 생성하여 DB에 적용한다.
spring.jpa.generate-ddl=false
# 대부분 구현체로 hibernate를 사용하기 때문에 spring.jpa.hibernate.ddl-auto 옵션을 통해서 보다 상세한 데이터베이스 초기화 전략을 설정할 수 있다.
spring.jpa.hibernate.ddl-auto=none
# 해당 설정은 사용되는 SQL문을 로그에서 확인할 수 있다.
spring.jpa.show-sql=true
#spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
spring.jpa.properties.hibernate.use_sql_comments=true

# Logging Setting
logging.level.org.hibernate=info
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.type.descriptor.sql=trace

# JSP Setting
spring.mvc.view.prefix=/WEB-INF/views/yeonji/
spring.mvc.view.suffix=.jsp

#HikariCP Setting
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.maximum-pool-size=5